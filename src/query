#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2022 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import sys
import datetime
import ipaddress

import queryhelper;


# ###### Main program #######################################################
if len(sys.argv) < 3:
   error('Usage: ' + sys.argv[0] + ' database_configuration ping|traceroute from_time to_time ')
configurationFile = sys.argv[1]
queryType         = sys.argv[2]
fromTimeStamp     = None
toTimeStamp       = None
if len(sys.argv) > 3:
   fromTimeStamp = datetime.datetime.strptime(sys.argv[3], "%Y-%m-%d %H:%M:%S")
   if len(sys.argv) > 4:
      toTimeStamp = datetime.datetime.strptime(sys.argv[4], "%Y-%m-%d %H:%M:%S")

# ====== Connect to database ================================================
configuration = queryhelper.DatabaseConfiguration(sys.argv[1])
client = configuration.createClient()

# ====== Query Ping data ====================================================
if queryType == 'ping':
   if configuration.getBackend() in [ 'MySQL', 'MariaDB', 'PostgreSQL' ]:
      query = 'SELECT TimeStamp, FromIP, ToIP, Checksum, PktSize, TC, Status, RTT FROM Ping'
      if fromTimeStamp != None:
         query += ' WHERE TimeStamp >= \'' + str(fromTimeStamp) + '\''
         if toTimeStamp != None:
            query += ' AND TimeStamp < \'' + str(toTimeStamp) + '\''
      rows = configuration.query(query)
   else:
      rows = None

   for row in rows:
      timeStamp     = round(row[0].replace(tzinfo=datetime.timezone.utc).timestamp() * 1000000.0)
      sourceIP      = queryhelper.unmap(ipaddress.ip_address(row[1]))
      destinationIP = queryhelper.unmap(ipaddress.ip_address(row[2]))
      checksum      = int(row[3])
      packetSize    = int(row[4])
      trafficClass  = int(row[5])
      status        = int(row[6])
      rtt           = int(row[7])

      sys.stdout.write('#P ' +
         str(sourceIP)         + ' ' +
         str(destinationIP)    + ' ' +
         hex(timeStamp)[2:]    + ' ' +
         hex(checksum)[2:]     + ' ' +
         str(status)           + ' ' +
         str(rtt)              + ' ' +
         hex(trafficClass)[2:] + ' ' +
         str(packetSize)       + '\n')

# ====== Query Traceroute data ==============================================
elif queryType == 'traceroute':
   if configuration.getBackend() in [ 'MySQL', 'MariaDB', 'PostgreSQL' ]:
      query = 'SELECT TimeStamp, FromIP, ToIP, Round, Checksum, PktSize, TC, HopNumber, TotalHops, Status, RTT, HopIP, PathHash FROM Traceroute'
      if fromTimeStamp != None:
         query += ' WHERE TimeStamp >= \'' + str(fromTimeStamp) + '\''
         if toTimeStamp != None:
            query += ' AND TimeStamp < \'' + str(toTimeStamp) + '\''
      rows = configuration.query(query)
   else:
      rows = None

   for row in rows:
      timeStamp     = round(row[0].replace(tzinfo=datetime.timezone.utc).timestamp() * 1000000.0)
      sourceIP      = queryhelper.unmap(ipaddress.ip_address(row[1]))
      destinationIP = queryhelper.unmap(ipaddress.ip_address(row[2]))
      roundNumber   = int(row[3])
      checksum      = int(row[4])
      packetSize    = int(row[5])
      trafficClass  = int(row[6])
      hopNumber     = int(row[7])
      totalHops     = int(row[8])
      status        = int(row[9])
      rtt           = int(row[10])
      hopIP         = queryhelper.unmap(ipaddress.ip_address(row[11]))
      pathHash      = int(row[12])
      if pathHash < 0:
         pathHash = 0x10000000000000000 - abs(pathHash)

      if hopNumber == 1:
         statusFlags = status - (status & 0xff)
         sys.stdout.write('#T ' +
            str(sourceIP)         + ' ' +
            str(destinationIP)    + ' ' +
            hex(timeStamp)[2:]    + ' ' +
            str(roundNumber)      + ' ' +
            hex(checksum)[2:]     + ' ' +
            str(totalHops)        + ' ' +
            hex(statusFlags)[2:]  + ' ' +
            hex(pathHash)[2:]     + ' ' +
            hex(trafficClass)[2:] + ' ' +
            str(packetSize)       + '\n')
      sys.stdout.write('\t ' +
         str(hopNumber)        + ' ' +
         hex(status & 0xff)[2:]       + ' ' +
         str(rtt)              + ' ' +
         str(hopIP)            + '\n')


 # ====== Error =============================================================
else:
   sys.stderr.write('Specify query type!\n')
   sys.exit(1)

#!/usr/bin/python3
#
# Create Test CA Hierarchy and Test Certificates
# Copyright (C) 2022-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import ipaddress
import netifaces
import socket
import sys

from CertificateHelper import *


# ###### Main program #######################################################

# ====== Handle command-line parameters =====================================
if len(sys.argv) < 3:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' ssl_directory server\n')
   sys.exit(1)
mainDirectory = sys.argv[1]
serverName    = sys.argv[2]

# ====== Prepare subjectAltName: current hostname+localhost+all addresses ===
subjectAltName = 'DNS:localhost'

# ------ Add FQDN of current hostname ---------------------------------------
fqdn = socket.getfqdn()
subjectAltName = subjectAltName + ',DNS:' + fqdn

# ------ Add all IP addresses -----------------------------------------------
localAddressSet = set()
for interfaceName in netifaces.interfaces():
    for family in [ netifaces.AF_INET, netifaces.AF_INET6 ]:
       addresses = netifaces.ifaddresses(interfaceName).get(family)
       if addresses:
          for address in addresses:
            if not '%' in address['addr']:   # Not a IPv6 link-local address
               localAddressSet.add(str(ipaddress.ip_address(address['addr'])))

for localAddress in localAddressSet:
   subjectAltName = subjectAltName + ',IP:' + localAddress

# print(subjectAltName)



# ====== Create CA hierarchy, if not existing ===============================

# ===========================================================================
# Hierarchy to be created:
# TestLevel1
#    - TestLevel2
#       - TestIntermediate
#          - TestLeaf
#             - Servers ...
#          - TestCA
#             - TestUserCA
#                - Users ...
#             - TestServerCA
#                - Servers ...
# ===========================================================================


# ====== Create Test CAs ====================================================
caKeyLength       = DefaultCAKeyLength
certKeyLength     = DefaultCertKeyLength
globalCRLFileName = "TestGlobal.crl"

# Create Test Root Level-1 CA certificate (self-signed):
TestLevel1 = CA(mainDirectory, 'TestLevel1',
                parentCA  = None,
                subject   = '/CN=Test Level-1 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Research Laboratory',
                certType  = CRT_RootCA,
                keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)

# Create Test Root Level-2 CA certificate (signed by Test Root Level-1):
TestLevel2 = CA(mainDirectory, 'TestLevel2',
                parentCA  = TestLevel1,
                subject   = '/CN=Test Level-2 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Research Laboratory',
                certType  = CRT_IntermediateCA,
                keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)

# Create Test Intermediate CA certificate (signed by Test Root Level-2):
TestIntermediate = CA(mainDirectory, 'TestIntermediate',
                      parentCA  = TestLevel2,
                      subject   = '/CN=*/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering',
                      certType  = CRT_IntermediateCA,
                      keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)

# Create Test Leaf CA certificate (signed by Test Intermediate):
TestLeaf = CA(mainDirectory, 'TestLeaf',
              parentCA  = TestIntermediate,
              subject   = '/CN=*/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=SMIL Lab',
              certType  = CRT_LeafCA,
              keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)



## ====== Create Test Servers and Users ======================================
#subject        = '/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=SMIL Lab'
#subjectAltName = 'DNS:localhost'

#servers = {}
#for server in ['mariadb', 'postgresql', 'mongodb', 'revoked' ]:
   #servers[server] = Certificate(mainDirectory, server + '.domain.test', TestLeaf,
                                 #subject, subjectAltName, CRT_Server,
                                 #keyLength = certKeyLength)
#servers['revoked'].revoke()

#users = {}
#for user in [ 'maintainer', 'importer', 'researcher', 'revoked' ] :
   #users[user] = Certificate(mainDirectory, user + '@domain.test', TestLeaf, subject, '', CRT_User,
                             #keyLength = certKeyLength)
#users['revoked'].revoke()


## ====== Some more testing ==================================================

## Create Test Intermediate CA certificate (signed by Test Root Level-2):
#TestCA = CA(mainDirectory, 'DatabaseTestCA',
            #parentCA  = TestLevel2,
            #subject   = '/CN=*/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Database Test Environment',
            #certType  = CRT_IntermediateCA,
            #keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)

#TestUserCA = CA(mainDirectory, 'DatabaseTestUserCA',
                #parentCA  = TestCA,
                #subject   = '/CN=*/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Database Test Users',
                #certType  = CRT_LeafCA,
                #keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)
#for username in [ 'maintainer', 'importer', 'researcher' ] :
   #user = Certificate(mainDirectory, username + '@domain.test', TestUserCA,
                      #subject, '', CRT_User)

#TestServerCA = CA(mainDirectory, 'DatabaseTestServerCA',
                  #parentCA  = TestCA,
                  #subject   = '/CN=*/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Database Test Servers',
                  #certType  = CRT_LeafCA,
                  #keyLength = caKeyLength, globalCRLFileName = globalCRLFileName)
#for dbname in ['mariadb', 'postgresql', 'mongodb' ]:
   #server = Certificate(mainDirectory, dbname + '.domain.test', TestServerCA,
                        #subject, subjectAltName, CRT_Server,
                        #keyLength = certKeyLength)


#for server in [ 'brunost', 'rekesmoerbroed', 'pinnekjoett' ]:
   #server = Certificate(mainDirectory, server + '.domain.test', TestLeaf, subject, subjectAltName,
                        #keyLength = certKeyLength)

#user1 = Certificate(mainDirectory, 'test1@mail.test', TestLeaf, subject, subjectAltName, CRT_User,
                    #keyLength = certKeyLength)


# ====== Create Test Server =================================================
subject = '/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=SMIL Lab'
server  = Certificate(mainDirectory, serverName, TestLeaf, subject, subjectAltName,
                      keyLength = certKeyLength)

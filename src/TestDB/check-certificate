#!/usr/bin/env bash
# ==========================================================================
#     _   _ _ ____            ____          _____
#    | | | (_)  _ \ ___ _ __ / ___|___  _ _|_   _| __ __ _  ___ ___ _ __
#    | |_| | | |_) / _ \ '__| |   / _ \| '_ \| || '__/ _` |/ __/ _ \ '__|
#    |  _  | |  __/  __/ |  | |__| (_) | | | | || | | (_| | (_|  __/ |
#    |_| |_|_|_|   \___|_|   \____\___/|_| |_|_||_|  \__,_|\___\___|_|
#
#       ---  High-Performance Connectivity Tracer (HiPerConTracer)  ---
#                 https://www.nntb.no/~dreibh/hipercontracer/
# ==========================================================================
#
# High-Performance Connectivity Tracer (HiPerConTracer)
# Copyright (C) 2015-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

set -eu

if [ $# -lt 2 ] ; then
   echo >&2 "Usage: $0 ca_certificate certificate ..."
   exit 1
fi
CA="$1"
shift

CERTTOOL="$(which certtool || true)"
CERTUTIL="$(which certutil || true)"


# ====== Look for CA certificate ============================================
if [ ! -e "${CA}" ] ; then
   echo >&2 "ERROR: Unable to find CA certificate file ${CA}!"
   exit 1
fi


# ====== Check each certificate =============================================
errors=0
while [ $# -gt 0 ] ; do
   # ====== Look for certificate ============================================
   CERT="$1"
   shift
   if [ ! -e "${CERT}" ] ; then
      echo >&2 "ERROR: Unable to find certificate file ${CERT}!"
      exit 1
   fi

   # ====== Show hierarchy ==================================================
   echo -e "\e[34mHierarchy in ${CERT}:\e[0m"
   openssl crl2pkcs7 -nocrl -certfile "${CERT}" | \
      openssl pkcs7 -print_certs -noout | awk '
BEGIN {
   S=0
}
/^$/       { next }
/^issuer/  { next }
/^subject/ { S++; N=sprintf("%d. ", S); print("\x1b[33m", N $0, "\x1b[0m"); next }
# /^issuer/  { print "\x1b[37m   " $0 "\x1b[0m"; next }
{ print }
'

   # ====== Verify certificate with CA certificate ==========================
   echo -e "\e[34mVerifying ${CERT} with CA ${CA}:\e[0m"
   if [ "${CERT}" == "${CA}" ] ; then
      echo "WARNING: Only checking self-signature!"
   fi

   # ------ OpenSSL ---------------------------------------------------------
   echo -en "\e[33mOpenSSL:\e[0m "
   if openssl verify -CAfile "${CA}" --untrusted "${CERT}" "${CERT}" >/dev/null 2>&1 ; then
      echo -e "\e[32;1mOKAY\e[0m"
   else
      errors=$((errors + 1))
      echo -e "\e[31;1mFAILED!\e[0m"
      openssl verify -CAfile "${CA}" --untrusted "${CERT}" "${CERT}" || true
   fi

   # ------ GNU TLS ---------------------------------------------------------
   echo -en "\e[33mGNU TLS:\e[0m "
   if [ "${CERTTOOL}" != "" ] ; then
      if "${CERTTOOL}" --verify --load-ca-certificate "${CA}" --infile "${CERT}" >/dev/null 2>&1 ; then
         echo -e "\e[32;1mOKAY\e[0m"
      else
         errors=$((errors + 1))
         echo -e "\e[31;1mFAILED!\e[0m"
         "${CERTTOOL}" --verify --load-ca-certificate "${CA}" --infile "${CERT}" || true
      fi
   else
      echo "(GnuTLS CertTool is not installed)"
   fi

   # ------ NSS -------------------------------------------------------------
   echo -en "\e[33mNSS:    \e[0m "
   if [ "${CERTUTIL}" != "" ] ; then
#       trap 'rm -rf "${db}"' EXIT
      db=$(mktemp --tmpdir -d "check-certificate-nss.XXXXXXXXXX")
      "${CERTUTIL}" --empty-password -N -d "${db}"
      "${CERTUTIL}" -A -n "My Root CA" -t "CT,C,C" -e -d "${db}" -a -i "${CA}" -u L

# #       "${CERTUTIL}" -A -n "My CA L1" -t "CT,C,C" -e -d "${db}" -i /etc/ssl/TestLevel1/certs/TestLevel1.crt
#       "${CERTUTIL}" -A -n "My CA L2" -t ",," -e -d "${db}" -i /etc/ssl/TestLevel2/certs/TestLevel2.crt
#       "${CERTUTIL}" -A -n "My CA I1" -t ",," -e -d "${db}" -i /etc/ssl/TestIntermediate1/certs/TestIntermediate1.crt
#       "${CERTUTIL}" -A -n "My CA I2" -t ",," -e -d "${db}" -i /etc/ssl/TestIntermediate2/certs/TestIntermediate2.crt
#       "${CERTUTIL}" -A -n "My CA L" -t ",," -e -d "${db}" -i /etc/ssl/TestLeaf/certs/TestLeaf.crt


      mkdir -p "${db}/tmp"
      cp "${CERT}" "${db}/tmp/cert.crt"
      pushd "${db}/tmp"

      pwd
      awk '\
BEGIN {
   component=0;
   inBlock=0;
}

/-----BEGIN CERTIFICATE-----/ {
   component++;
   outputFileName = sprintf("%02u", component);
   print >outputFileName;
   inBlock=1;
   next
}

/-----END CERTIFICATE-----/ {
   print >outputFileName;
   close(outputFileName);
   inBlock=0;
   next
}

inBlock {
   print >outputFileName;
}
' <cert.crt
      ls -l
      rm "01"
      find . -name "[0-9][0-9]" -printf "%f\n" | sort | tail -n1 | xargs -r rm
      subCA=0
      find . -name "[0-9][0-9]" -printf "%f\n" | sort -r | \
         while read -r name ; do
            subCA=$((subCA + 1))
            "${CERTUTIL}" -A -n "My Sub CA ${subCA}" -t ",," -e -d "${db}" -a -i "${name}" -u L
         done
      ls -l

      popd

      "${CERTUTIL}" -A -n "My Certificate" -t ",," -e -d "${db}" -a -i "${CERT}"

      "${CERTUTIL}" -L -d "${db}"

      declare -A types=(
         ["server"]="V"
         ["client"]="C"
         ["CA"]="L"
         ["email_signer"]="S"
         ["email_recipient"]="R"
      )
      good=0
      for type in "${!types[@]}" ; do
         setting="${types[$type]}"
         "${CERTUTIL}" -V -e -u "${setting}" -n "My Certificate" -d "${db}" >/dev/null 2>&1 && \
            good=$((good + 1)) && \
            if [ ${good} -eq 1 ] ; then echo -en "\e[32;1mOKAY\e[0m" ; fi && \
            echo -en "   \e[36m${type}\e[0m"
      done
      echo ""
      if [ ${good} -eq 0 ] ; then
         errors=$((errors + 1))
         echo -e "\e[31;1mFAILED!\e[0m"
         "${CERTUTIL}" -V -n "My Certificate" -d "${db}" -u V || true
         "${CERTUTIL}" -L "${db}" || true
      fi
      echo "$db"
   else
      echo "(NSS CertTool is not installed)"
   fi

done
if [ ${errors} -gt 0 ] ; then
   exit 1
fi

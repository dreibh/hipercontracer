#!/bin/bash -e

mkdir -p /tmp/ssl

HOST=`hostname -f`
ALT_ADDRESSES=`hostname -I | xargs -n1 | awk '{ print "IP." NR "=" $1 }'`
SERVER_OPENSSL_CONF="/tmp/ssl/${HOST}.conf"
SERVER_KEY="/tmp/ssl/${HOST}.key"
SERVER_CSR="/tmp/ssl/${HOST}.csr"
SERVER_CRT="/tmp/ssl/${HOST}.crt"
SERVER_CHAIN="/tmp/ssl/${HOST}.pem"

CA1="TestRoot"
CA1_DIR="/tmp/ssl/${CA1}"
CA1_OPENSSL_CONF="${CA1}.conf"
CA1_KEY="private/${CA1}.key"
CA1_CSR="${CA1}.csr"
CA1_CRT="certs/${CA1}.crt"
CA1_PEM="chains/${CA1}-chain.pem"
CA1_CRL="crl/${CA1}.crl"

CA2="TestIntermediate"
CA2_DIR="/tmp/ssl/${CA2}"
CA2_OPENSSL_CONF="${CA2}.conf"
CA2_KEY="private/${CA2}.key"
CA2_CSR="${CA2}.csr"
CA2_CRT="certs/${CA2}.crt"
CA2_PEM="${CA2}-chain.pem"
CA2_CRL="crl/${CA2}.crl"

CA3="TestLeaf"
CA3_DIR="/tmp/ssl/${CA3}"
CA3_OPENSSL_CONF="${CA3}.conf"
CA3_KEY="private/${CA3}.key"
CA3_CSR="${CA3}.csr"
CA3_CRT="certs/${CA3}.crt"
CA3_PEM="${CA3}-chain.pem"
CA3_CRL="crl/${CA3}.crl"


# ====== Make Level-1 CA ====================================================
if [ ! -e ${CA1_DIR}/${CA1}.key -o ! -e ${CA1_DIR}/${CA1}.crt ] ; then

   echo -e "\x1b[34mCreating Level-1 CA key and certificate ...\x1b[0m"

   sudo mkdir -p \
      ${CA1_DIR}/certs \
      ${CA1_DIR}/crl \
      ${CA1_DIR}/private \
      ${CA1_DIR}/newcerts \
      ${CA1_DIR}/chains
   if [ ! -e ${CA1_DIR}/index.txt ] ; then
      sudo touch ${CA1_DIR}/index.txt
   fi
   if [ ! -e ${CA1_DIR}/serial ] ; then
      echo "1000" | sudo tee ${CA1_DIR}/serial >/dev/null
   fi
   if [ ! -e ${CA1_DIR}/crlnumber ] ; then
      echo "1000" | sudo tee ${CA1_DIR}/crlnumber >/dev/null
   fi

   sudo tee ${CA1_DIR}/${CA1_OPENSSL_CONF} >/dev/null <<EOF
[ ca ]
default_ca        = CA_default

[ CA_default ]
# Directory and file locations.
dir                    = ${CA1_DIR}
certs                  = \$dir/certs
crl_dir                = \$dir/crl
new_certs_dir          = \$dir/newcerts
database               = \$dir/index.txt
serial                 = \$dir/serial
RANDFILE               = \$dir/private/.rand

# The root key and root certificate.
private_key            = \$dir/${CA1_KEY}
certificate            = \$dir/${CA1_CRT}

# For certificate revocation lists.
crlnumber              = \$dir/crlnumber
crl                    = \$dir/crl/${CA1_CRL}
crl_extensions         = crl_ext
default_crl_days       = 30

# SHA-1 is deprecated, so use SHA-512 instead.
default_md             = sha512

name_opt               = ca_default
cert_opt               = ca_default
default_days           = 375
preserve               = no
policy                 = policy_strict

[ policy_strict ]
countryName            = supplied
stateOrProvinceName    = supplied
organizationName       = supplied
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[ req ]
default_bits           = 8192
default_md             = sha512
distinguished_name     = req_distinguished_name

[ req_distinguished_name ]
countryName            = NO
stateOrProvinceName    = Oslo
localityName           = Oslo
organizationName       = Simula Metropolitan Centre for Digital Engineering
commonName             = ${CA1} Level-1 CA Certificate

[ v3_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[ v3_leaf_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign
EOF

   # Create Level-1 CA certificate (self-signed)
   sudo openssl req -x509 \
      -newkey rsa:1024 -sha512 -nodes \
      -keyout ${CA1_DIR}/${CA1_KEY} \
      -out ${CA1_DIR}/${CA1_CRT} \
      -extensions v3_ca \
      -days 3650 \
      -utf8 -subj "/CN=${CA1} Level-1 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering" \
      -config ${CA1_DIR}/${CA1_OPENSSL_CONF}

   # openssl x509 -noout -text -in ${CA1_DIR}/${CA1_CRT}

   sudo cp ${CA1_DIR}/${CA1_CRT} ${CA1_DIR}/${CA1_PEM}
   sudo openssl verify -CAfile ${CA1_DIR}/${CA1_PEM} ${CA1_DIR}/${CA1_CRT}
fi

# ====== Make Level-2 CA ====================================================
if [ ! -e ${CA2}.key -o ! -e ${CA2}.crt ] ; then

   echo -e "\x1b[34mCreating Level-2 CA key and certificate ...\x1b[0m"

   sudo mkdir -p \
      ${CA2_DIR}/certs \
      ${CA2_DIR}/crl \
      ${CA2_DIR}/private \
      ${CA2_DIR}/newcerts \
      ${CA2_DIR}/chains
   if [ ! -e ${CA2_DIR}/index.txt ] ; then
      sudo touch ${CA2_DIR}/index.txt
   fi
   if [ ! -e ${CA2_DIR}/serial ] ; then
      echo "1000" | sudo tee ${CA2_DIR}/serial >/dev/null
   fi
   if [ ! -e ${CA2_DIR}/crlnumber ] ; then
      echo "1000" | sudo tee ${CA2_DIR}/crlnumber >/dev/null
   fi

   sudo tee ${CA2_DIR}/${CA2_OPENSSL_CONF} >/dev/null <<EOF
[ ca ]
default_ca             = CA_default

[ CA_default ]
# Directory and file locations.
dir                    = ${CA2_DIR}
certs                  = \$dir/certs
crl_dir                = \$dir/crl
new_certs_dir          = \$dir/newcerts
database               = \$dir/index.txt
serial                 = \$dir/serial
RANDFILE               = \$dir/private/.rand

# The root key and root certificate.
private_key            = \$dir/${CA2_KEY}
certificate            = \$dir/${CA2_CRT}

# For certificate revocation lists.
crlnumber              = \$dir/crlnumber
crl                    = \$dir/crl/${CA2_CRL}
crl_extensions         = crl_ext
default_crl_days       = 30

# SHA-1 is deprecated, so use SHA-512 instead.
default_md             = sha512

name_opt               = ca_default
cert_opt               = ca_default
default_days           = 375
preserve               = no
policy                 = policy_strict

[ policy_strict ]
countryName            = supplied
stateOrProvinceName    = supplied
organizationName       = supplied
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[ req ]
default_bits           = 8192
default_md             = sha512
distinguished_name     = req_distinguished_name
x509_extensions        = v3_ca

[ req_distinguished_name ]
countryName            = NO
stateOrProvinceName    = Oslo
localityName           = Oslo
organizationName       = Simula Metropolitan Centre for Digital Engineering
commonName             = ${CA2} Level-2 CA Certificate

[ v3_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[ v3_leaf_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
keyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage       = clientAuth, emailProtection

[ server_cert ]
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage               = critical, digitalSignature, keyEncipherment
extendedKeyUsage       = serverAuth
EOF

   # Create Level-2 CA certificate
   sudo openssl req \
      -newkey rsa:1024 -sha512 -nodes \
      -keyout ${CA2_DIR}/${CA2_KEY} \
      -out ${CA2_DIR}/${CA2_CSR} \
      -utf8 -subj "/CN=${CA1} Level-2 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering" \
      -config ${CA2_DIR}/${CA2_OPENSSL_CONF}
   sudo openssl ca \
      -config ${CA1_DIR}/${CA1_OPENSSL_CONF} \
      -in ${CA2_DIR}/${CA2_CSR} \
      -out ${CA2_DIR}/${CA2_CRT} \
      -batch -notext \
      -extensions v3_ca \
      -days 3650 \
      -utf8 -subj "/CN=${CA1} Level-2 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering" \

   # openssl x509 -noout -text -in ${CA2_DIR}/${CA2_CRT}

   sudo cat ${CA1_DIR}/${CA1_PEM} ${CA2_DIR}/${CA2_CRT} | sudo tee ${CA2_DIR}/${CA2_PEM} >/dev/null
   sudo openssl verify -CAfile ${CA2_DIR}/${CA2_PEM} ${CA2_DIR}/${CA2_CRT}
fi

# ====== Make Level-3 CA ====================================================
if [ ! -e ${CA3}.key -o ! -e ${CA3}.crt ] ; then

   echo -e "\x1b[34mCreating Level-3 CA key and certificate ...\x1b[0m"

   sudo mkdir -p \
      ${CA3_DIR}/certs \
      ${CA3_DIR}/crl \
      ${CA3_DIR}/private \
      ${CA3_DIR}/newcerts \
      ${CA3_DIR}/chains
   if [ ! -e ${CA3_DIR}/index.txt ] ; then
      sudo touch ${CA3_DIR}/index.txt
   fi
   if [ ! -e ${CA3_DIR}/serial ] ; then
      echo "1000" | sudo tee ${CA3_DIR}/serial >/dev/null
   fi
   if [ ! -e ${CA3_DIR}/crlnumber ] ; then
      echo "1000" | sudo tee ${CA3_DIR}/crlnumber >/dev/null
   fi

   sudo tee ${CA3_DIR}/${CA3_OPENSSL_CONF} >/dev/null <<EOF
[ ca ]
default_ca             = CA_default

[ CA_default ]
# Directory and file locations.
dir                    = ${CA3_DIR}
certs                  = \$dir/certs
crl_dir                = \$dir/crl
new_certs_dir          = \$dir/newcerts
database               = \$dir/index.txt
serial                 = \$dir/serial
RANDFILE               = \$dir/private/.rand

# The root key and root certificate.
private_key            = \$dir/${CA3_KEY}
certificate            = \$dir/${CA3_CRT}

# For certificate revocation lists.
crlnumber              = \$dir/crlnumber
crl                    = \$dir/crl/${CA3_CRL}
crl_extensions         = crl_ext
default_crl_days       = 30

# SHA-1 is deprecated, so use SHA-512 instead.
default_md             = sha512

name_opt               = ca_default
cert_opt               = ca_default
default_days           = 375
preserve               = no
policy                 = policy_strict

[ policy_strict ]
countryName            = supplied
stateOrProvinceName    = supplied
organizationName       = supplied
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[ req ]
default_bits           = 8192
default_md             = sha512
distinguished_name     = req_distinguished_name
x509_extensions        = v3_ca

[ req_distinguished_name ]
countryName            = NO
stateOrProvinceName    = Oslo
localityName           = Oslo
organizationName       = Simula Metropolitan Centre for Digital Engineering
commonName             = ${CA3} Level-3 CA Certificate

[ v3_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[ v3_leaf_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
keyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage       = clientAuth, emailProtection

[ server_cert ]
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage               = critical, digitalSignature, keyEncipherment
extendedKeyUsage       = serverAuth
EOF

   # Create Level-3 CA certificate
   sudo openssl req \
      -newkey rsa:1024 -sha512 -nodes \
      -keyout ${CA3_DIR}/${CA3_KEY} \
      -out ${CA3_DIR}/${CA3_CSR} \
      -utf8 -subj "/CN=${CA3} Level-3 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Centre for Resilient Networks and Applications" \
      -config ${CA3_DIR}/${CA3_OPENSSL_CONF}
   sudo openssl ca \
      -config ${CA1_DIR}/${CA1_OPENSSL_CONF} \
      -in ${CA3_DIR}/${CA3_CSR} \
      -out ${CA3_DIR}/${CA3_CRT} \
      -batch -notext \
      -extensions v3_leaf_ca \
      -days 3650 \
      -utf8 -subj "/CN=${CA3} Level-3 CA Certificate/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Centre for Resilient Networks and Applications" \

   # openssl x509 -noout -text -in ${CA3_DIR}/${CA3_CRT}

   sudo cat ${CA1_DIR}/${CA1_PEM} ${CA3_DIR}/${CA3_CRT} | sudo tee ${CA3_DIR}/${CA3_PEM} >/dev/null
   sudo openssl verify -CAfile ${CA3_DIR}/${CA3_PEM} ${CA3_DIR}/${CA3_CRT}
fi

# ====== Make server certificate ============================================
if [ ! -e ${HOST}.key -o ! -e ${HOST}.crt ] ; then

   echo -e "\x1b[34mCreating server key and certificate ...\x1b[0m"

   sudo tee ${SERVER_OPENSSL_CONF} >/dev/null <<EOF
[ req ]
default_bits        = 4096
default_md          = sha512
distinguished_name  = req_distinguished_name
req_extensions      = req_ext
[ req_distinguished_name ]
countryName         = NO
stateOrProvinceName = Oslo
localityName        = Oslo
organizationName    = Simula Metropolitan Centre for Digital Engineering
commonName          = ${HOST}
[ req_ext ]
subjectAltName = @alt_names
[ alt_names ]
DNS.1 = localhost
${ALT_ADDRESSES}
EOF

   sudo openssl req \
      -newkey rsa:1024 -sha512 -nodes \
      -keyout ${SERVER_KEY} \
      -out ${SERVER_CSR} \
      -utf8 -subj "/CN=${HOST}" \
      -config ${SERVER_OPENSSL_CONF}

   sudo openssl ca \
      -config ${CA3_DIR}/${CA3_OPENSSL_CONF} \
      -in ${SERVER_CSR} \
      -out ${SERVER_CRT} \
      -batch -notext \
      -extensions server_cert \
      -days 3650 \
      -utf8 -subj "/CN=${HOST}/C=NO/ST=Oslo/L=Oslo/O=Simula Metropolitan Centre for Digital Engineering/OU=Centre for Resilient Networks and Applications"

   openssl req -noout -text -in ${SERVER_CSR}

   sudo cat ${CA3_DIR}/${CA3_PEM} ${SERVER_CRT} | sudo tee ${SERVER_CHAIN}-chain.pem >/dev/null
   sudo openssl verify -CAfile ${CA3_DIR}/${CA3_PEM} ${SERVER_CRT}
fi

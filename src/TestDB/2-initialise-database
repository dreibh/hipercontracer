#!/usr/bin/env bash
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2022 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

# Bash options:
set -e

if [ $# -lt 2 ] ; then
   echo >&2 "Usage: $0 mariadb|mongodb|mysql|postgresql users.conf [--force-removal-without-confirmation]"
   exit 1
fi
if [ ! -e $2 ] ; then
   echo >&2 "ERROR: Use configuration $2 does not exist!"
fi

MAINTAINER_PASSWORD="!maintainer!"
IMPORTER_PASSWORD="!importer!"
RESEARCHER_PASSWORD="!researcher!"
. $2

if [ "${MAINTAINER_PASSWORD}" = "!maintainer!" -o \
     "${IMPORTER_PASSWORD}"   = "!importer!"   -o \
     "${RESEARCHER_PASSWORD}" = "!researcher!" ] ; then
   echo >&2 "DO NOT USE THE EXAMPLE PASSWORDS!"
   exit 1
fi

if [ "$3" != "--force-removal-without-confirmation" ] ; then
   echo -n "WARNING: THIS SCRIPT WILL ERASE THE EXISTING DATABASES. To proceed, type \"I am sure!\": "
   read -er agree
   if [ "$agree" != "I am sure!" ] ; then
      echo "Exiting."
      exit
   fi
fi


# ###### MySQL/MariaDB ######################################################
if [ "$1" == "mysql" -o "$1" == "mariadb" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-mariadb-on-ubuntu-22-04

   echo -e "\x1b[34mPreparing admin user for MySQL/MariaDB ...\x1b[0m"
   if [ ! -e ~/.my.cnf ] ; then
     echo "ERROR: ~/.my.cnf does not exist! Set root user password there!"
     exit 1
   fi

   # ====== Create database =================================================
   echo -e "\x1b[33mCreating database ...\x1b[0m"
   mysql -u root --password="${ROOT_PASSWORD}" <mysql-database.sql

   # ====== Create schema ===================================================
   echo -e "\x1b[33mCreating schema ...\x1b[0m"
   mysql -u root --password="${ROOT_PASSWORD}" <mysql-schema.sql

   # ====== Create users and roles ==========================================
   echo -e "\x1b[33mCreating users and roles ...\x1b[0m"
   mysql -u root --password="${ROOT_PASSWORD}" <<EOF
DROP USER IF EXISTS maintainer;
CREATE USER maintainer IDENTIFIED BY '${MAINTAINER_PASSWORD}';
GRANT ALL PRIVILEGES ON PingTracerouteDB.* TO maintainer;

DROP USER IF EXISTS importer;
CREATE USER importer IDENTIFIED BY '${IMPORTER_PASSWORD}';
GRANT INSERT, UPDATE ON PingTracerouteDB.Ping TO importer;
GRANT INSERT, UPDATE ON PingTracerouteDB.Traceroute TO importer;

DROP USER IF EXISTS researcher;
CREATE USER researcher IDENTIFIED BY '${RESEARCHER_PASSWORD}';
GRANT SELECT, INSERT, UPDATE ON PingTracerouteDB.* TO researcher;

FLUSH PRIVILEGES;
EOF


# ###### PostgreSQL #########################################################
elif [ "$1" == "postgresql" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart

   echo -e "\x1b[34mPreparing admin user for PostgreSQL ...\x1b[0m"

   # ====== Create database =================================================
   echo -e "\x1b[33mCreating database ...\x1b[0m"
   sudo -u postgres psql <postgresql-database.sql

   # ====== Create schema ===================================================
   echo -e "\x1b[33mCreating schema ...\x1b[0m"
   sudo -u postgres psql pingtraceroutedb <postgresql-schema.sql

   # ====== Create users and roles ==========================================
   echo -e "\x1b[33mCreating users and roles ...\x1b[0m"
   sudo -u postgres psql pingtraceroutedb <<EOF
REASSIGN OWNED BY maintainer TO postgres;
DROP USER IF EXISTS maintainer;
CREATE USER maintainer WITH LOGIN ENCRYPTED PASSWORD '${MAINTAINER_PASSWORD}';
GRANT ALL PRIVILEGES ON DATABASE pingtraceroutedb TO maintainer;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO maintainer;

REASSIGN OWNED BY importer TO postgres;
DROP USER IF EXISTS importer;
CREATE USER importer WITH LOGIN ENCRYPTED PASSWORD '${IMPORTER_PASSWORD}';
GRANT CONNECT ON DATABASE pingtraceroutedb TO importer;
GRANT INSERT, UPDATE ON TABLE Ping TO importer;
GRANT INSERT, UPDATE ON TABLE Traceroute TO importer;

REASSIGN OWNED BY researcher TO postgres;
DROP USER IF EXISTS researcher;
CREATE USER researcher WITH LOGIN ENCRYPTED PASSWORD '${RESEARCHER_PASSWORD}';
GRANT CONNECT ON DATABASE pingtraceroutedb TO researcher;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO researcher;
EOF


# ###### MongoDB ############################################################
elif [ "$1" == "mongodb" ] ; then
   # Documentation: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/

   echo -e "\x1b[34mPreparing admin user for MongoDB ...\x1b[0m"

   # ====== Create database =================================================
   echo -e "\x1b[33mCreating database ...\x1b[0m"
   mongosh --tls --tlsCAFile /etc/ssl/TestRoot/certs/TestRoot.crt \
      mongodb://localhost --username root --password "${ROOT_PASSWORD}" --quiet <mongodb-database.ms

   # ====== Create schema ===================================================
   echo -e "\x1b[33mCreating schemata ...\x1b[0m"
   mongosh --tls --tlsCAFile /etc/ssl/TestRoot/certs/TestRoot.crt \
      mongodb://localhost --username root --password "${ROOT_PASSWORD}" --quiet <mongodb-schema.ms

   # ====== Create users and roles ==========================================
   echo -e "\x1b[33mCreating user and roles ...\x1b[0m"
   mongosh --tls --tlsCAFile /etc/ssl/TestRoot/certs/TestRoot.crt \
      mongodb://localhost --username root --password "${ROOT_PASSWORD}" --quiet <<EOF
use admin
db.dropUser("maintainer")
db.createUser({ user: "maintainer",
                pwd: "${MAINTAINER_PASSWORD}",
                roles: [
                   "userAdminAnyDatabase",
                   "dbAdminAnyDatabase",
                   "readWriteAnyDatabase",
                   "clusterAdmin"
                ] })
use pingtraceroutedb
db.dropUser("importer")
db.dropUser("researcher")
db.createUser({ user: "importer",   pwd: "${IMPORTER_PASSWORD}",   roles: [ "readWrite" ] })
db.createUser({ user: "researcher", pwd: "${RESEARCHER_PASSWORD}", roles: [ "dbAdmin", "readWrite" ] })
quit()
EOF
   echo ""


# ###### Error ##############################################################
else
   echo >&2 "ERROR: Unsupported database: $1"
   exit 1
fi

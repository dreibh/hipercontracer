#!/bin/bash -e

if [ $# -ne 2 ] ; then
   echo >&2 "Usage: $0 mariadb|mongodb|mysql|postgres users.conf"
   exit 1
fi
if [ ! -e $2 ] ; then
   echo >&2 "ERROR: Use configuration $2 does not exist!"
fi

MAINTAINER_PASSWORD="!maintainer!"
IMPORTER_PASSWORD="!importer!"
RESEARCHER_PASSWORD="!researcher!"
. ./$2

if [ "${MAINTAINER_PASSWORD}" = "!maintainer!" -o \
     "${IMPORTER_PASSWORD}"   = "!importer!"   -o \
     "${RESEARCHER_PASSWORD}" = "!researcher!" ] ; then
   echo >&2 "DO NOT USE THE EXAMPLE PASSWORDS!"
# FIXME! ????
# exit 1
fi

echo -n "WARNING: THIS SCRIPT WILL ERASE THE EXISTING DATABASES. To proceed, type \"I am sure!\": "
# FIXME! ????
# read -er agree
# if [ "$agree" != "I am sure!" ] ; then
#    echo "Exiting."
#    exit
# fi


# ###### MongoDB ############################################################
if [ "$1" == "mongodb" ] ; then
   # Documentation: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/

   echo -e "\x1b[34mPreparing admin user for MongoDB ...\x1b[0m"

   # ====== Create schema ===================================================
   echo -e "\x1b[33mCreating database and schemata ...\x1b[0m"
   mongosh --quiet <mongodb-schema.ms

   # ====== Create users and roles ==========================================
   echo -e "\x1b[33mCreating user and roles ...\x1b[0m"
   mongosh --quiet <<EOF
use admin
db.dropUser("maintainer")
db.createUser({ user: "maintainer",
                pwd: "${MAINTAINER_PASSWORD}",
                roles: [
                   "userAdminAnyDatabase",
                   "dbAdminAnyDatabase",
                   "readWriteAnyDatabase",
                   "clusterAdmin"
                ] })
use pingtraceroutedb
db.dropUser("importer")
db.dropUser("researcher")
db.createUser({ user: "importer",   pwd: "${IMPORTER_PASSWORD}",   roles: [ "readWrite" ] })
db.createUser({ user: "researcher", pwd: "${RESEARCHER_PASSWORD}", roles: [ "dbAdmin", "readWrite" ] })
quit()
EOF
   echo ""


# ###### MySQL/MariaDB ######################################################
elif [ "$1" == "mysql" -o "$1" == "mariadb" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-mariadb-on-ubuntu-22-04

   echo -e "\x1b[34mPreparing admin user for MySQL/MariaDB ...\x1b[0m"
   if [ ! -e ~/.my.cnf ] ; then
     echo "ERROR: ~/.my.cnf does not exist! Set root user password there!"
     exit 1
   fi

   echo -e "\x1b[33mCreating schema ...\x1b[0m"
   mysql -u root <mysql-schema.sql

   echo -e "\x1b[33mCreating users and roles ...\x1b[0m"
   mysql -u root <<EOF
DROP USER IF EXISTS maintainer;
CREATE USER maintainer IDENTIFIED BY '${MAINTAINER_PASSWORD}';
GRANT ALL PRIVILEGES ON PingTracerouteDB.* TO maintainer;

DROP USER IF EXISTS importer;
CREATE USER importer IDENTIFIED BY '${IMPORTER_PASSWORD}';
GRANT INSERT ON PingTracerouteDB.Ping TO importer;
GRANT INSERT ON PingTracerouteDB.Traceroute TO importer;

DROP USER IF EXISTS researcher;
CREATE USER researcher IDENTIFIED BY '${RESEARCHER_PASSWORD}';
GRANT SELECT, INSERT, UPDATE ON PingTracerouteDB.* TO researcher;

FLUSH PRIVILEGES;
EOF


# ###### PostgreSQL #########################################################
elif [ "$1" == "postgres" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart

   echo -e "\x1b[34mPreparing admin user for PostgreSQL ...\x1b[0m"

   echo -e "\x1b[33mCreating schema ...\x1b[0m"
   sudo -u postgres psql <postgresql-schema.sql

   echo -e "\x1b[33mCreating users and roles ...\x1b[0m"
   sudo -u postgres psql <<EOF
DROP USER IF EXISTS maintainer;
CREATE USER maintainer IDENTIFIED BY '${MAINTAINER_PASSWORD}';
GRANT ALL PRIVILEGES ON PingTracerouteDB.* TO maintainer;

DROP USER IF EXISTS importer;
CREATE USER importer IDENTIFIED BY '${IMPORTER_PASSWORD}';
GRANT CONNECT, INSERT ON PingTracerouteDB.Ping, PingTracerouteDB.Traceroute TO importer;

DROP USER IF EXISTS researcher;
CREATE USER researcher IDENTIFIED BY '${RESEARCHER_PASSWORD}';
GRANT CONNECT, SELECT, INSERT, UPDATE ON PingTracerouteDB.* TO researcher;
EOF


# ###### Error ##############################################################
else
   echo >&2 "ERROR: Unsupported database: $1"
   exit 1
fi

#!/bin/bash -e

if [ $# -ne 2 ] ; then
   echo >&2 "Usage: $0 mariadb|postgres|mongodb users.conf"
   exit 1
fi
if [ ! -e $2 ] ; then
   echo >&2 "ERROR: Use configuration $2 does not exist!"
fi

MAINTAINER_PASSWORD="!maintainer!"
IMPORTER_PASSWORD="!importer1"
RESEARCHER_PASSWORD="!researcher!"
. ./$2

if [ "${MAINTAINER_PASSWORD}" = "!maintainer!" -o \
     "${IMPORTER_PASSWORD}"   = "!importer!"   -o \
     "${RESEARCHER_PASSWORD}" = "!researcher!" ] ; then
   echo >&2 "=== DO NOT USE THE DEFAULT PASSWORDS! ==="
# FIXME! ????
# exit 1
fi

echo -n "WARNING: THIS SCRIPT WILL ERASE THE EXISTING DATABASES. To proceed, type \"I am sure!\": "
read -er agree
if [ "$agree" != "I am sure!" ] ; then
   echo "Exiting."
   exit
fi


# ###### MariaDB ############################################################
if [ "$1" == "mariadb" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-mariadb-on-ubuntu-22-04

   echo "Preparing admin user for MariaDB ..."



# ###### PostgreSQL #########################################################
elif [ "$1" == "postgres" ] ; then
   # Documentation: https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart

   echo "Preparing admin user for PostgreSQL ..."



# ###### MongoDB ############################################################
elif [ "$1" == "mongodb" ] ; then
   # Documentation: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/

   echo -e "\x1b[34mPreparing admin user for MongoDB ...\x1b[0m"

   # ====== Create user "maintainer" ========================================
   echo -e "\x1b[33mCreating user \"maintainer\" ...\x1b[0m"
   mongosh --quiet <<EOF
use admin
db.dropUser("maintainer")
db.createUser({ user: "maintainer",
                pwd: "${MAINTAINER_PASSWORD}",
                roles: [
                   "userAdminAnyDatabase",
                   "dbAdminAnyDatabase",
                   "readWriteAnyDatabase",
                   "clusterAdmin"
                ] })
quit()
EOF
   echo ""

   # ====== Create database =================================================
   echo -e "\x1b[33mCreating database ...\x1b[0m"
   mongosh --quiet <<EOF
use pingtraceroutedb
db.dropDatabase()
use pingtraceroutedb
show dbs
quit()
EOF
   echo ""

   # ====== Create schema ===================================================
   echo -e "\x1b[33mCreating schema ...\x1b[0m"
   mongosh --quiet <mongodb-schema.ms

   # ====== Create users "importer", "researcher", as well as their roles ===
   echo -e "\x1b[33mCreating users \"importer\", \"researcher\", as well as their roles ...\x1b[0m"
   mongosh --quiet <<EOF
use pingtraceroutedb
db.dropUser("importer")
db.dropUser("researcher")
db.createUser({ user: "importer",   pwd: "${IMPORTER_PASSWORD}",   roles: [ "readWrite" ] })
db.createUser({ user: "researcher", pwd: "${RESEARCHER_PASSWORD}", roles: [ "dbAdmin", "readWrite" ] })
quit()
EOF
   echo""


# ###### Error ##############################################################
else
   echo >&2 "ERROR: Unsupported database: $1"
   exit 1
fi
